import java.util.concurrent.TimeUnit

def allureVersion = "2.14.0"

allure {
    adapter {
        allureJavaVersion.set("2.14.0")
        aspectjVersion.set("1.9.5")
       // autoconfigure.set(true)
        autoconfigureListeners.set(true)
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set("2.14.0")
                enabled.set(true)
                autoconfigureListeners.set(true)
            }
        }
    }
//
//    report {
//        reportDir.set(layout.projectDirectory.dir(project.projectDir.toString() + "/allure-reports"))
//    }
}

clean.doFirst {
    print "Cleaning Allure reports from: " + "${projectDir}/allure-results/"
    delete "${projectDir}/allure-results/"
}

dependencies {

    implementation("io.qameta.allure:allure-java-commons:$allureVersion")
    // implementation group: 'io.qameta.allure', name: 'allure-testng', version: '2.14.0'

    implementation group: 'com.aventstack', name: 'extentreports', version: '5.0.9'

    implementation group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.2'
    implementation group: 'org.aspectj', name: 'aspectjrt', version: '1.9.2'

    testImplementation group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.2'
    testImplementation group: 'org.aspectj', name: 'aspectjrt', version: '1.9.2'

    testRuntimeOnly group: 'org.aspectj', name: 'aspectjweaver', version: '1.9.2'
    testRuntimeOnly group: 'org.aspectj', name: 'aspectjrt', version: '1.9.2'

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.0')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.0')

    implementation group: 'com.google.guava', name: 'guava', version: '13.0-rc1'

    testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.8.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.8.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-api', version: '1.8.0'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-suite-engine', version: '1.8.0'


    testImplementation group: 'org.testng', name: 'testng', version: '7.0.0'

    implementation group: 'com.codeborne', name: 'selenide', version: '5.22.0'
    implementation group: 'com.microsoft.playwright', name: 'playwright', version: '1.22.0'


    implementation group: 'org.springframework', name: 'spring-test', version: '5.3.8'
    implementation group: 'org.springframework', name: 'spring-context', version: "5.3.8"

    implementation group: 'org.springframework.retry', name: 'spring-retry', version: '1.3.1'

}

test {
    ignoreFailures = true

    systemProperties System.getProperties()

  //  systemProperty 'allure.results.directory', project.projectDir.toString() + "/allure-results"

    useJUnitPlatform {
    }

    beforeTest { desc ->
        println "\n*** Starting execution of test ${desc.className}.${desc.name} ***"
    }
    afterTest { descriptor, result ->
        println "<<< Test ${descriptor.name} resulted in ${result.resultType} and took " + getElapsedTime(result.endTime - result.startTime) + " >>>\n"
    }

    testLogging {
        showStandardStreams = true
        exceptionFormat "full"
    }
}

//This will force the tests to always execute by clearing out the test cache
test.dependsOn 'cleanTest'
test.outputs.upToDateWhen { false }

configurations {
    testCompile
}

def getElapsedTime(def time) {

    if (time / 1000 < 1) {
        return String.format("0 min, %.3f sec", time / 1000)
    } else {
        return String.format("%d min, %d sec",
                TimeUnit.MILLISECONDS.toMinutes(time),
                TimeUnit.MILLISECONDS.toSeconds(time) -
                        TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(time))

        )
    }
}